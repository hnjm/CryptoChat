package com.example.CryptoChat.common.data.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pk = new Property(0, Long.class, "pk", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Text = new Property(2, String.class, "text", false, "TEXT");
        public final static Property ReceiverId = new Property(3, String.class, "receiverId", false, "RECEIVER_ID");
        public final static Property SenderId = new Property(4, String.class, "senderId", false, "SENDER_ID");
        public final static Property CreatedAt = new Property(5, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property Read = new Property(6, Boolean.class, "read", false, "READ");
        public final static Property ImageUrl = new Property(7, String.class, "imageUrl", false, "IMAGE_URL");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pk
                "\"ID\" TEXT," + // 1: id
                "\"TEXT\" TEXT NOT NULL ," + // 2: text
                "\"RECEIVER_ID\" TEXT NOT NULL ," + // 3: receiverId
                "\"SENDER_ID\" TEXT NOT NULL ," + // 4: senderId
                "\"CREATED_AT\" INTEGER," + // 5: createdAt
                "\"READ\" INTEGER," + // 6: read
                "\"IMAGE_URL\" TEXT);"); // 7: imageUrl
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MESSAGE_ID ON \"MESSAGE\"" +
                " (\"ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long pk = entity.getPk();
        if (pk != null) {
            stmt.bindLong(1, pk);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindString(3, entity.getText());
        stmt.bindString(4, entity.getReceiverId());
        stmt.bindString(5, entity.getSenderId());
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(6, createdAt.getTime());
        }
 
        Boolean read = entity.getRead();
        if (read != null) {
            stmt.bindLong(7, read ? 1L: 0L);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(8, imageUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long pk = entity.getPk();
        if (pk != null) {
            stmt.bindLong(1, pk);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindString(3, entity.getText());
        stmt.bindString(4, entity.getReceiverId());
        stmt.bindString(5, entity.getSenderId());
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(6, createdAt.getTime());
        }
 
        Boolean read = entity.getRead();
        if (read != null) {
            stmt.bindLong(7, read ? 1L: 0L);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(8, imageUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pk
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.getString(offset + 2), // text
            cursor.getString(offset + 3), // receiverId
            cursor.getString(offset + 4), // senderId
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // createdAt
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // read
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // imageUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setPk(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setText(cursor.getString(offset + 2));
        entity.setReceiverId(cursor.getString(offset + 3));
        entity.setSenderId(cursor.getString(offset + 4));
        entity.setCreatedAt(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setRead(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setImageUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setPk(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getPk();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.getPk() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
