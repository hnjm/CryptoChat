package com.example.CryptoChat.common.data.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIALOG".
*/
public class DialogDao extends AbstractDao<Dialog, Long> {

    public static final String TABLENAME = "DIALOG";

    /**
     * Properties of entity Dialog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pk = new Property(0, Long.class, "pk", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property LastMessageId = new Property(2, String.class, "lastMessageId", false, "LAST_MESSAGE_ID");
        public final static Property DialogPhoto = new Property(3, String.class, "dialogPhoto", false, "DIALOG_PHOTO");
        public final static Property DialogName = new Property(4, String.class, "dialogName", false, "DIALOG_NAME");
        public final static Property ReceiverId = new Property(5, String.class, "receiverId", false, "RECEIVER_ID");
        public final static Property UnreadCount = new Property(6, int.class, "unreadCount", false, "UNREAD_COUNT");
    }


    public DialogDao(DaoConfig config) {
        super(config);
    }
    
    public DialogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIALOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pk
                "\"ID\" TEXT NOT NULL ," + // 1: id
                "\"LAST_MESSAGE_ID\" TEXT," + // 2: lastMessageId
                "\"DIALOG_PHOTO\" TEXT," + // 3: dialogPhoto
                "\"DIALOG_NAME\" TEXT," + // 4: dialogName
                "\"RECEIVER_ID\" TEXT," + // 5: receiverId
                "\"UNREAD_COUNT\" INTEGER NOT NULL );"); // 6: unreadCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIALOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dialog entity) {
        stmt.clearBindings();
 
        Long pk = entity.getPk();
        if (pk != null) {
            stmt.bindLong(1, pk);
        }
        stmt.bindString(2, entity.getId());
 
        String lastMessageId = entity.getLastMessageId();
        if (lastMessageId != null) {
            stmt.bindString(3, lastMessageId);
        }
 
        String dialogPhoto = entity.getDialogPhoto();
        if (dialogPhoto != null) {
            stmt.bindString(4, dialogPhoto);
        }
 
        String dialogName = entity.getDialogName();
        if (dialogName != null) {
            stmt.bindString(5, dialogName);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(6, receiverId);
        }
        stmt.bindLong(7, entity.getUnreadCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dialog entity) {
        stmt.clearBindings();
 
        Long pk = entity.getPk();
        if (pk != null) {
            stmt.bindLong(1, pk);
        }
        stmt.bindString(2, entity.getId());
 
        String lastMessageId = entity.getLastMessageId();
        if (lastMessageId != null) {
            stmt.bindString(3, lastMessageId);
        }
 
        String dialogPhoto = entity.getDialogPhoto();
        if (dialogPhoto != null) {
            stmt.bindString(4, dialogPhoto);
        }
 
        String dialogName = entity.getDialogName();
        if (dialogName != null) {
            stmt.bindString(5, dialogName);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(6, receiverId);
        }
        stmt.bindLong(7, entity.getUnreadCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Dialog readEntity(Cursor cursor, int offset) {
        Dialog entity = new Dialog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pk
            cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastMessageId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dialogPhoto
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dialogName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // receiverId
            cursor.getInt(offset + 6) // unreadCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dialog entity, int offset) {
        entity.setPk(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getString(offset + 1));
        entity.setLastMessageId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDialogPhoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDialogName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReceiverId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnreadCount(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Dialog entity, long rowId) {
        entity.setPk(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Dialog entity) {
        if(entity != null) {
            return entity.getPk();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Dialog entity) {
        return entity.getPk() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
